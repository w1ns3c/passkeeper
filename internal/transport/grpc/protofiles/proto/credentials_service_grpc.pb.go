// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: credentials_service.proto

package protofiles

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredSvcClient is the client API for CredSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredSvcClient interface {
	CredAdd(ctx context.Context, in *CredAddRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CredGet(ctx context.Context, in *CredGetRequest, opts ...grpc.CallOption) (*CredGetResponse, error)
	CredUpd(ctx context.Context, in *CredUpdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CredDel(ctx context.Context, in *CredDelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CredList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CredListResponse, error)
}

type credSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCredSvcClient(cc grpc.ClientConnInterface) CredSvcClient {
	return &credSvcClient{cc}
}

func (c *credSvcClient) CredAdd(ctx context.Context, in *CredAddRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CredSvc/CredAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credSvcClient) CredGet(ctx context.Context, in *CredGetRequest, opts ...grpc.CallOption) (*CredGetResponse, error) {
	out := new(CredGetResponse)
	err := c.cc.Invoke(ctx, "/CredSvc/CredGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credSvcClient) CredUpd(ctx context.Context, in *CredUpdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CredSvc/CredUpd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credSvcClient) CredDel(ctx context.Context, in *CredDelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/CredSvc/CredDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credSvcClient) CredList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CredListResponse, error) {
	out := new(CredListResponse)
	err := c.cc.Invoke(ctx, "/CredSvc/CredList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredSvcServer is the server API for CredSvc service.
// All implementations must embed UnimplementedCredSvcServer
// for forward compatibility
type CredSvcServer interface {
	CredAdd(context.Context, *CredAddRequest) (*empty.Empty, error)
	CredGet(context.Context, *CredGetRequest) (*CredGetResponse, error)
	CredUpd(context.Context, *CredUpdRequest) (*empty.Empty, error)
	CredDel(context.Context, *CredDelRequest) (*empty.Empty, error)
	CredList(context.Context, *empty.Empty) (*CredListResponse, error)
	mustEmbedUnimplementedCredSvcServer()
}

// UnimplementedCredSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCredSvcServer struct {
}

func (UnimplementedCredSvcServer) CredAdd(context.Context, *CredAddRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredAdd not implemented")
}
func (UnimplementedCredSvcServer) CredGet(context.Context, *CredGetRequest) (*CredGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredGet not implemented")
}
func (UnimplementedCredSvcServer) CredUpd(context.Context, *CredUpdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredUpd not implemented")
}
func (UnimplementedCredSvcServer) CredDel(context.Context, *CredDelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredDel not implemented")
}
func (UnimplementedCredSvcServer) CredList(context.Context, *empty.Empty) (*CredListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredList not implemented")
}
func (UnimplementedCredSvcServer) mustEmbedUnimplementedCredSvcServer() {}

// UnsafeCredSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredSvcServer will
// result in compilation errors.
type UnsafeCredSvcServer interface {
	mustEmbedUnimplementedCredSvcServer()
}

func RegisterCredSvcServer(s grpc.ServiceRegistrar, srv CredSvcServer) {
	s.RegisterService(&CredSvc_ServiceDesc, srv)
}

func _CredSvc_CredAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredSvcServer).CredAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CredSvc/CredAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredSvcServer).CredAdd(ctx, req.(*CredAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredSvc_CredGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredSvcServer).CredGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CredSvc/CredGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredSvcServer).CredGet(ctx, req.(*CredGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredSvc_CredUpd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredUpdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredSvcServer).CredUpd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CredSvc/CredUpd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredSvcServer).CredUpd(ctx, req.(*CredUpdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredSvc_CredDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredSvcServer).CredDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CredSvc/CredDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredSvcServer).CredDel(ctx, req.(*CredDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredSvc_CredList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredSvcServer).CredList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CredSvc/CredList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredSvcServer).CredList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CredSvc_ServiceDesc is the grpc.ServiceDesc for CredSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CredSvc",
	HandlerType: (*CredSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CredAdd",
			Handler:    _CredSvc_CredAdd_Handler,
		},
		{
			MethodName: "CredGet",
			Handler:    _CredSvc_CredGet_Handler,
		},
		{
			MethodName: "CredUpd",
			Handler:    _CredSvc_CredUpd_Handler,
		},
		{
			MethodName: "CredDel",
			Handler:    _CredSvc_CredDel_Handler,
		},
		{
			MethodName: "CredList",
			Handler:    _CredSvc_CredList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credentials_service.proto",
}
